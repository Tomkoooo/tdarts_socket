/**
 * Debug script to test server metrics download
 * 
 * Usage: node test-metrics-download.js
 */

import jwt from "jsonwebtoken";
import dotenv from "dotenv";

dotenv.config({ path: '.env.local' });

const JWT_SECRET = process.env.SOCKET_JWT_SECRET;
const SOCKET_URL = process.env.SOCKET_URL;
const ALLOWED_ORIGIN = process.env.ALLOWED_ORIGIN || "https://tdarts.sironic.hu";

console.log('üîç Szerver metrik√°k let√∂lt√©s√©nek tesztel√©se\n');
console.log('Konfigur√°ci√≥:');
console.log(`  SOCKET_URL: ${SOCKET_URL}`);
console.log(`  ALLOWED_ORIGIN: ${ALLOWED_ORIGIN}`);
console.log(`  JWT_SECRET: ${JWT_SECRET ? '‚úÖ be√°ll√≠tva' : '‚ùå HI√ÅNYZIK!'}\n`);

if (!JWT_SECRET) {
  console.error('‚ùå SOCKET_JWT_SECRET hi√°nyzik a .env.local f√°jlb√≥l!');
  process.exit(1);
}

if (!SOCKET_URL) {
  console.error('‚ùå SOCKET_URL hi√°nyzik a .env.local f√°jlb√≥l!');
  process.exit(1);
}

// Create test token
function createTestToken(userId, userRole) {
  return jwt.sign({ userId, userRole }, JWT_SECRET, { expiresIn: '1h' });
}

async function testServerConnection() {
  console.log('1Ô∏è‚É£ Szerver el√©rhet≈ës√©g√©nek tesztel√©se...');
  
  try {
    const response = await fetch(`${SOCKET_URL}/api/socket`, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${createTestToken('test-user', 'admin')}`,
        'Origin': ALLOWED_ORIGIN,
      }
    });
    
    console.log(`   ‚úÖ Szerver v√°laszolt: ${response.status} ${response.statusText}`);
    const data = await response.json();
    console.log(`   üì¶ Response:`, data);
    return true;
  } catch (error) {
    console.log(`   ‚ùå Szerver nem √©rhet≈ë el: ${error.message}`);
    console.log(`   üí° Ellen≈ërizd hogy a szerver fut-e: npm run socket-server`);
    return false;
  }
}

async function testMetricsDownload() {
  console.log('\n2Ô∏è‚É£ Szerver metrik√°k let√∂lt√©s√©nek tesztel√©se...');
  
  try {
    const token = createTestToken('stress-test-admin', 'admin');
    
    console.log(`   üîó K√©r√©s k√ºld√©se: ${SOCKET_URL}/api/metrics`);
    console.log(`   üìã Method: GET`);
    
    const response = await fetch(`${SOCKET_URL}/api/metrics`, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Origin': ALLOWED_ORIGIN,
      }
    });
    
    console.log(`   üì° HTTP Status: ${response.status} ${response.statusText}`);
    
    const data = await response.json();
    console.log(`   üì¶ Response success: ${data.success}`);
    
    if (data.success && data.metrics) {
      console.log(`   ‚úÖ Metrik√°k sikeresen let√∂ltve!`);
      console.log(`   üìä Metrik√°k sz√°ma: ${data.metrics.metrics?.length || 0}`);
      console.log(`   ‚è±Ô∏è  Id≈ëtartam: ${data.metrics.duration}s`);
      console.log(`   üíª CPU m√©r√©sek: ${data.metrics.socketMetrics?.connections || 0} csatlakoz√°s`);
      return true;
    } else {
      console.log(`   ‚ùå Metrik√°k nem √©rhet≈ëk el!`);
      console.log(`   üìã Hiba: ${data.error || 'Unknown error'}`);
      console.log(`\n   üí° Lehets√©ges okok:`);
      console.log(`      1. A szerveren nincs be√°ll√≠tva: ENABLE_MONITORING=true`);
      console.log(`      2. A monitoring m√©g nem indult el`);
      console.log(`      3. M√©g nincs el√©g metrika adat\n`);
      return false;
    }
  } catch (error) {
    console.log(`   ‚ùå Let√∂lt√©s sikertelen: ${error.message}`);
    return false;
  }
}

async function checkServerEnv() {
  console.log('\n3Ô∏è‚É£ Szerver k√∂rnyezeti v√°ltoz√≥k ellen≈ërz√©se...');
  console.log(`   üí° SSH-zz a szerverre √©s futtasd:`);
  console.log(`      cat .env.local | grep ENABLE_MONITORING`);
  console.log(`   `);
  console.log(`   Elv√°rt kimenet:`);
  console.log(`      ENABLE_MONITORING=true`);
  console.log(``);
}

// Run tests
(async () => {
  const serverReachable = await testServerConnection();
  
  if (!serverReachable) {
    console.log('\n‚ùå A szerver nem √©rhet≈ë el. Jav√≠tsd ezt el≈ësz√∂r!');
    process.exit(1);
  }
  
  const metricsAvailable = await testMetricsDownload();
  
  if (!metricsAvailable) {
    await checkServerEnv();
    console.log('\n‚ùå A metrik√°k nem √©rhet≈ëk el. K√∂vesd a fenti l√©p√©seket!');
    process.exit(1);
  }
  
  console.log('\n‚úÖ Minden teszt sikeres! A metrik√°k let√∂lt√©se m≈±k√∂dik.');
  console.log('üí° Most futtasd a teljes stressz tesztet: npm run stress-test\n');
})();

